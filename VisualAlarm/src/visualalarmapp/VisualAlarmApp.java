package visualalarmapp;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JSlider;
import javax.swing.SwingWorker;
import javax.swing.Timer;

public class VisualAlarmApp extends javax.swing.JFrame {

    public static Color colors;
    public static int speed;
    public static boolean flash = false;
    public static Timer timer;
    public static JFrame blinkWin;

    public VisualAlarmApp() throws IOException, ParseException {
        initComponents();
    }

    // toggle components  
    public void ActivationMode(boolean b) {
        buttonStart.setEnabled(b);
        buttonColorChooser.setEnabled(b);
        checkboxOnTime.setEnabled(b);
        checkboxCountdown.setEnabled(b);
        spinnerOnTime.setEnabled(b);
        spinnerCountdown.setEnabled(b);
        sliderSpeed.setEnabled(b);
    }
    
    //creating timer
    private Timer createTimer(int wait) {
        Timer timer = new Timer(wait, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
        flash = true;
        blinking();
            }
        });
        timer.setRepeats(false);
        return timer;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonStart = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        labelColor = new javax.swing.JLabel();
        spinnerOnTime = new javax.swing.JSpinner();
        spinnerCountdown = new javax.swing.JSpinner();
        sliderSpeed = new javax.swing.JSlider();
        checkboxOnTime = new javax.swing.JCheckBox();
        checkboxCountdown = new javax.swing.JCheckBox();
        buttonColorChooser = new javax.swing.JButton();
        labelSpeed = new javax.swing.JLabel();

        setTitle("Visual Alarm");
        setIconImage(Toolkit.getDefaultToolkit().getImage("src/tim_icon.png"));
        setLocation(new java.awt.Point(570, 270));

        buttonStart.setText("START");
        buttonStart.setToolTipText("Click to start the timer");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        buttonStop.setText("STOP");
        buttonStop.setToolTipText("Click to stop the timer");
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        labelColor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelColor.setText("No color selected");
        labelColor.setToolTipText("");

        spinnerOnTime.setModel(new javax.swing.SpinnerDateModel());
        spinnerOnTime.setToolTipText("Set on time:");
        spinnerOnTime.setEditor(new javax.swing.JSpinner.DateEditor(spinnerOnTime, "HH:mm:ss"));

        spinnerCountdown.setToolTipText("Set countdown time:");

        sliderSpeed.setMajorTickSpacing(500);
        sliderSpeed.setMaximum(5000);
        sliderSpeed.setMinorTickSpacing(100);
        sliderSpeed.setPaintTicks(true);
        sliderSpeed.setSnapToTicks(true);
        sliderSpeed.setToolTipText("Set blinking speed");
        sliderSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSpeedStateChanged(evt);
            }
        });

        checkboxOnTime.setText("On time:");
        checkboxOnTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxOnTimeActionPerformed(evt);
            }
        });

        checkboxCountdown.setText("Countdown (mins)");
        checkboxCountdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxCountdownActionPerformed(evt);
            }
        });

        buttonColorChooser.setText("Choose color");
        buttonColorChooser.setToolTipText("Choose color of the blinking window");
        buttonColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonColorChooserActionPerformed(evt);
            }
        });

        labelSpeed.setText("Blinking speed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(buttonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkboxCountdown)
                                .addGap(38, 38, 38)
                                .addComponent(spinnerCountdown, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkboxOnTime)
                                .addGap(94, 94, 94)
                                .addComponent(spinnerOnTime)))
                        .addContainerGap(126, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonColorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelSpeed)
                                .addComponent(sliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 32, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxOnTime)
                    .addComponent(spinnerOnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxCountdown)
                    .addComponent(spinnerCountdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonColorChooser)
                    .addComponent(labelColor))
                .addGap(18, 18, 18)
                .addComponent(labelSpeed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Starting application using time input from 2 JSpinner components
    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        ActivationMode(false);
        speed = sliderSpeed.getValue();
        int countdown = ((int) spinnerCountdown.getValue()) * 60 * 1000;

        if (checkboxOnTime.isSelected()) {
            try {
                DateFormat df = new SimpleDateFormat("HH:mm:ss");
                Date onTime = (Date) spinnerOnTime.getValue();

                Calendar c2 = Calendar.getInstance();

                int h2 = c2.get(Calendar.HOUR_OF_DAY);
                int m2 = c2.get(Calendar.MINUTE);
                int s2 = c2.get(Calendar.SECOND);

                String ss2 = Integer.toString(h2) + ":" + Integer.toString(m2) + ":" + Integer.toString(s2);
                Date now = df.parse(ss2);
                int waitingTime = (int) (onTime.getTime() - now.getTime());

                timer = createTimer(waitingTime);
                timer.start();
            } catch (ParseException ex) {
                Logger.getLogger(VisualAlarmApp.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (checkboxCountdown.isSelected()) {
            timer = createTimer(countdown);
            timer.start();
        }

        if (checkboxOnTime.isSelected()) {
            ActivationMode(false);
            buttonStop.setEnabled(true);
        }

        if (checkboxCountdown.isSelected()) {
            ActivationMode(false);
            buttonStop.setEnabled(true);
        }
    }//GEN-LAST:event_buttonStartActionPerformed
    //changing color in blinking window
    private void buttonColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonColorChooserActionPerformed
        JColorChooser jcc = new JColorChooser();
        colors = jcc.getColor();
        colors = jcc.showDialog(null, "Choose label color", colors);
        labelColor.setOpaque(true);
        labelColor.setBackground(colors);
        labelColor.setText("Color successfully selected!");
    }//GEN-LAST:event_buttonColorChooserActionPerformed
    //stopping the application and returning to initial state
    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        buttonStart.setEnabled(true);
        buttonColorChooser.setEnabled(true);
        checkboxOnTime.setEnabled(true);
        checkboxCountdown.setEnabled(true);
        spinnerOnTime.setEnabled(true);
        spinnerCountdown.setEnabled(true);
        sliderSpeed.setEnabled(true);
        checkboxOnTime.setSelected(false);
        checkboxCountdown.setSelected(false);
        labelColor.setOpaque(false);
        labelColor.setText("Choose label color");
        timer.stop();  
    }//GEN-LAST:event_buttonStopActionPerformed

    private void checkboxOnTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxOnTimeActionPerformed
        if (checkboxOnTime.isSelected()) {
            checkboxCountdown.setEnabled(false);
            spinnerCountdown.setEnabled(false);

        } else {
            checkboxCountdown.setEnabled(true);
            spinnerCountdown.setEnabled(true);
        }
    }//GEN-LAST:event_checkboxOnTimeActionPerformed

    private void checkboxCountdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxCountdownActionPerformed
        if (checkboxCountdown.isSelected()) {
            checkboxOnTime.setEnabled(false);
            spinnerOnTime.setEnabled(false);
        } else {
            checkboxOnTime.setEnabled(true);
            spinnerOnTime.setEnabled(true);
        }
    }//GEN-LAST:event_checkboxCountdownActionPerformed
    //setting up logic for adjusting of blinking speed (frequency) in blinking window
    private void sliderSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSpeedStateChanged
        speed = ((JSlider) evt.getSource()).getValue();
        labelSpeed.setText(String.valueOf("  Blinking speed: " + sliderSpeed.getValue()) + " ms  ");
        labelSpeed.setFont (new Font("Dialog", Font.BOLD, 12));
    }//GEN-LAST:event_sliderSpeedStateChanged
    //creation of blinking window 
    private void blinking() {
        SwingWorker sw = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                JFrame blinkWin = new JFrame("Visual Alarm");
                blinkWin.setSize(700, 450);
                blinkWin.setIconImage(Toolkit.getDefaultToolkit().getImage("src/tim_icon.png"));                blinkWin.setBackground(Color.WHITE);
                repaint();
                blinkWin.setLocationRelativeTo(null);
                blinkWin.setVisible(true);
                Thread.sleep(speed);

                while (flash) {
                    blinkWin.getContentPane().setBackground(colors);
                    Thread.sleep(speed);
                    repaint();
                    blinkWin.getContentPane().setBackground(Color.WHITE);
                    repaint();
                    Thread.sleep(speed);
                }
                blinkWin.dispose();
                flash = false;
                return null;
          }
        };
        sw.execute();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualAlarmApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualAlarmApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualAlarmApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualAlarmApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    //starting/closing application from system tray via popup menu
        if (!SystemTray.isSupported()) {
            System.out.println("System tray is not supported!!! ");
            return;
        }
        SystemTray systemTray = SystemTray.getSystemTray();
        Image image = Toolkit.getDefaultToolkit().getImage("src/tim_icon.png");

        PopupMenu trayPopupMenu = new PopupMenu();

        MenuItem action = new MenuItem("Settings");
        action.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    new VisualAlarmApp().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(VisualAlarmApp.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(VisualAlarmApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        trayPopupMenu.add(action);
        MenuItem close = new MenuItem("Close");
        close.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        trayPopupMenu.add(close);
        TrayIcon trayIcon = new TrayIcon(image, "Visual Alarm", trayPopupMenu);
        trayIcon.setImageAutoSize(true);

        try {
            systemTray.add(trayIcon);
        } catch (AWTException awtException) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton buttonColorChooser;
    private javax.swing.JButton buttonStart;
    private javax.swing.JButton buttonStop;
    private javax.swing.JCheckBox checkboxCountdown;
    private javax.swing.JCheckBox checkboxOnTime;
    public javax.swing.JLabel labelColor;
    private javax.swing.JLabel labelSpeed;
    private javax.swing.JSlider sliderSpeed;
    private javax.swing.JSpinner spinnerCountdown;
    private javax.swing.JSpinner spinnerOnTime;
    // End of variables declaration//GEN-END:variables
}
